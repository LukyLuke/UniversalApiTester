buildscript {
	ext {
		springboot = "2.1.9.RELEASE"
		spring = "5.1.0.RELEASE"
		
		activemq = "5.15.10"
		protobuf = "3.10.0"
		jackson = "2.10.0"
		lombok = "1.18.10"
		
		jupiter = "5.4.2"
		assertj = "3.13.2"
		mockito = "3.1.0"
	}
	repositories {
		mavenCentral()
		gradlePluginPortal()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springboot}")
	}
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'jacoco'

	repositories {
        mavenCentral()
    }
}

task codeCoverageReport(type: JacocoReport) {
	// Gather execution data from all subprojects
	executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
	
	// Add all relevant sourcesets from the subprojects 
	subprojects.each {
		sourceSets it.sourceSets.main
	}
	
	reports {
		xml.enabled true
		xml.destination file("${rootDir}/build/reports/jacoco/combined.xml")
		html.enabled true
		html.destination file("${rootDir}/build/reports/jacoco")
		csv.enabled false
	}
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
	subprojects*.test
}

subprojects {
	dependencies {
		implementation("org.springframework:spring-context:${spring}")
		
		testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${jupiter}")
		testImplementation("org.junit.jupiter:junit-jupiter-api:${jupiter}")
		testImplementation("org.junit.jupiter:junit-jupiter-params:${jupiter}")
		testImplementation("org.assertj:assertj-core:${assertj}")
		testImplementation("org.mockito:mockito-core:${mockito}")
	}

	project(":primary-adapter").dependencies {
		implementation project(":primary-port")
		implementation project(":secondary-adapter")
		implementation project(":application")
		implementation project(":domain")

		compileOnly("org.projectlombok:lombok:${lombok}")
		annotationProcessor("org.projectlombok:lombok:${lombok}")
		
		implementation("org.springframework.boot:spring-boot-starter-web:${springboot}")
		implementation("com.fasterxml.jackson.core:jackson-databind:${jackson}")
		
		implementation("org.springframework.boot:spring-boot-starter-activemq:${springboot}")
		implementation("org.springframework:spring-jms:${spring}")
		implementation("org.apache.activemq:activemq-client:${activemq}")
	}
	project(":primary-port").dependencies {
		implementation project(":application")
		implementation project(":domain")

		compileOnly("org.projectlombok:lombok:${lombok}")
		annotationProcessor("org.projectlombok:lombok:${lombok}")
		
		implementation("org.springframework.boot:spring-boot-starter-web:${springboot}")
	}

	project(":secondary-adapter").dependencies {
		implementation project(":secondary-port")
		implementation project(":application")
		implementation project(":domain")
		
		compileOnly("org.projectlombok:lombok:${lombok}")
		annotationProcessor("org.projectlombok:lombok:${lombok}")

		implementation("org.springframework.boot:spring-boot-starter-activemq:${springboot}")
		implementation("org.springframework:spring-jms:${spring}")
		implementation("org.apache.activemq:activemq-broker:${activemq}")
		implementation("com.google.protobuf:protobuf-java:${protobuf}")
		
		runtime("org.springframework:spring-jms:${spring}")
		
	}
	project(":secondary-port").dependencies {
		implementation project(":application")
		implementation project(":domain")

		compileOnly("org.projectlombok:lombok:${lombok}")
		annotationProcessor("org.projectlombok:lombok:${lombok}")

		implementation("com.google.protobuf:protobuf-java:${protobuf}")
	}

	project(":application").dependencies {
		implementation project(":domain")
	}
	project(":domain").dependencies {
		compileOnly("org.projectlombok:lombok:${lombok}")
		annotationProcessor("org.projectlombok:lombok:${lombok}")
	}
	
	project(":starter") {
		apply plugin: "application"
		apply plugin: 'org.springframework.boot'

		dependencies {
			compile(project(":domain"))
			compile(project(":application"))
			compile(project(":secondary-port"))
			compile(project(":secondary-adapter"))
			compile(project(":primary-adapter"))
			compile(project(":primary-port"))
			
			implementation("org.springframework.boot:spring-boot-starter:${springboot}")
		}
		application {
			mainClassName = 'ch.ranta.universal.tester.App'
		}
		
		bootJar {
			baseName = 'universal-api-tester'
			version =  '0.1.0'
		}
	}
	
	test {
		useJUnitPlatform()
		finalizedBy jacocoTestCoverageVerification, codeCoverageReport
	}
	
	jacocoTestCoverageVerification {
		violationRules {
			rule {
				limit {
					minimum = "0.9".toBigDecimal()
				}
			}
		}
	}
}

sourceCompatibility = '11'
targetCompatibility = '11'

group = 'ch.ranta'
version = '0.1.0'
